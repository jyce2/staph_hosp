---
  title: "weight_staph"
format: html
---
  
```{r}
# Import data 

staph <- read.csv("staph2017.csv")

```


```{r}
# load packages
library(tidyverse)
library(survey)
library(srvyr)
library(broom)

```

# Exclusion criteria / clean data

```{r}
# glance data
as_tibble(staph)
names(staph)


# derive variables
staph_d <-   staph %>% 
  mutate(hosp = if_else(HOSPITAL==1 | ICU16==1| READMIT==1, 1, 0),
           co = if_else(CACASE==1, 1, 0),
          BSI = if_else(BLOOD==1 | BSI==1, 1, 0), 
          SSI = if_else(SSI==1, 1, 0), 
          SST = if_else(WOUND==1 | SKIN==1 | SST==1, 1, 0), 
          REP = if_else(BAL==1 | REP==1, 1, 0),
          ENT = if_else(ENT==1 | SPUTUM==1 | SPECSYN=="SINUSITIS" | ENT==1, 1, 0),
          BJI = if_else(SPECSYN=="TENOSYNOVITIS" | BJI==1, 1, 0), 
          kidney = if_else(CDIAL9==1 | RENAL==1 | RENABN==1, 1, 0), 
          heart = if_else(HEART==1 | MI11==1 | PVD==1 | CVA==1, 1, 0), 
         resp = if_else(CPD11 == 1 | CYSTIC9 ==1, 1, 0)
         )



# count total in survey-weighted data 
# 5001 obs
staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  summarize(n = survey_total())

staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  filter(!is.na(kidney)) %>%
  group_by(kidney) %>%
  summarize(n = survey_total())


staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  group_by(ENT) %>%
  summarize(n = survey_total())


staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  group_by(HIV) %>%
  summarize(n = survey_total())


staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  group_by(CYSTIC9) %>%
  summarize(n = survey_total())


# filter to non missing values 
# 4911 obs
staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  filter(
                      (!is.na(SEX)) &
                      (!is.na(DIABETES)) &
                      (!is.na(SATX)) &
                      (!is.na(mrsafinal)) &
                      (!is.na(INVASIVE)) &
                      (!is.na(SMOKER)) &
                      (!is.na(BSI)) &
                      (!is.na(kidney)) &
                      (!is.na(hosp)) &
                      (!is.na(co)) & 
                     (!is.na(ENT)) & 
                     (!is.na(resp))) %>%
  summarize(n=survey_total())

# exclude health-care acquired infections
# 4363 obs
staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  filter((!is.na(newage)) & 
                      (!is.na(SEX)) &
                      (!is.na(DIABETES)) &
                      (!is.na(SATX)) &
                      (!is.na(mrsafinal)) &
                      (!is.na(INVASIVE)) &
                      (!is.na(SMOKER)) &
                      (!is.na(BSI)) &
                      (!is.na(kidney)) &
                      (!is.na(hosp)) &
                      (!is.na(co)) & 
                     (!is.na(ENT)) & 
                     (!is.na(WOUND)) &
                      (SATX==1 & hosp_onset==0 & CACASE==0 | CACASE==1))%>%
  summarize(n=survey_total())

# Hospitalized:
# 1555 obs vs. 2808 obs 
staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  filter( 
                      (!is.na(SEX)) &
                      (!is.na(DIABETES)) &
                      (!is.na(SATX)) &
                      (!is.na(mrsafinal)) &
                      (!is.na(INVASIVE)) &
                      (!is.na(TXHOSP)) &
                      (!is.na(SMOKER)) &
                      (!is.na(BSI)) &
                      (!is.na(kidney)) &
                      (!is.na(hosp)) &
                      (!is.na(co)) & 
                     (!is.na(ENT)) & 
                     (!is.na(WOUND)) &
                      (SATX==1 & hosp_onset==0 & CACASE==0 | CACASE==1))%>%
  group_by(hosp) %>%
  summarize(n=survey_total(), p=survey_prop())


# Comm-onset vs. healthcare associated infections 
# 2907 obs vs. 1456 obs = 4363 obs
staph_d %>%
  as_survey(weights = c(WEIGHT)) %>%
  filter((!is.na(newage)) & 
                      (!is.na(SEX)) &
                      (!is.na(DIABETES)) &
                      (!is.na(SATX)) &
                      (!is.na(mrsafinal)) &
                      (!is.na(INVASIVE)) &
                      (!is.na(SMOKER)) &
                      (!is.na(BSI)) &
                      (!is.na(kidney)) &
                      (!is.na(hosp)) &
                      (!is.na(co)) & 
                     (!is.na(ENT)) & 
                     (!is.na(WOUND)) &
                      (SATX==1 & hosp_onset==0 & CACASE==0 | CACASE==1))%>%
  group_by(co) %>%
  summarize(n=survey_total(), p=survey_prop())



##############################################################
# alternatively:
# Remove missing values from source variables of interest
staph_cc <- staph %>%
  drop_na(newage, SEX, DIABETES, SATX, mrsafinal, INVASIVE, SMOKER, BSI, ENT, WOUND)


# Full set
# derive hospitalization variable
# derive co variable for comm (vs. hop) variable
staph_cs <- staph_cc %>%
  filter(SATX ==1 & hosp_onset==0 & CACASE==0 | CACASE==1) %>%
  mutate(hosp = if_else(HOSPITAL==1 | ICU16==1| READMIT==1, 1, 0),
           co = if_else(CACASE==1, 1, 0),
          BSI = if_else(BLOOD==1 | BSI==1, 1, 0), 
          CNS = if_else(CSF==1 | CNS==1, 1, 0),
          UND = if_else(NIOTHSITE==1 | UND==1, 1, 0),
          SSI = if_else(SSI==1, 1, 0), 
          SST = if_else(WOUND==1 | SKIN==1 | SST==1, 1, 0), 
          REP = if_else(BAL==1 | REP==1, 1, 0),
          ENT = if_else(ENT==1 | SPUTUM==1 | SPECSYN=="SINUSITIS" | ENT==1, 1, 0),
          kidney = if_else(CDIAL9==1 | RENAL==1 | RENABN==1, 1, 0), 
           heart = if_else(HEART==1 | MI11==1 | PVD==1 | CVA==1, 1, 0),
          resp = if_else(CPD11 == 1 | CYSTIC9 ==1, 1, 0))


# change num -> cat variables
names <- c('hosp', 'co', 'BSI', 'SSI', 'SST', 'REP', 'ENT', 'kidney', 'SEX' ,'mrsafinal', 'SATX', 'INVASIVE','DIABETES', 'SMOKER', 'heart', 'WOUND')
staph_cs[,names] <- lapply(staph_cs[,names], factor)

library(forcats)
# Rename all factor levels 
staph_cs$hosp <- fct_recode(staph_cs$hosp, "No" = "0", "Yes" = "1") 
staph_cs$co <- fct_recode(staph_cs$co, "Healthcare-associated" = "0", "Community-onset" = "1") 
staph_cs$BSI <- fct_recode(staph_cs$BSI, "No" = "0", "Yes" = "1") 
staph_cs$REP <- fct_recode(staph_cs$REP, "No" = "0", "Yes" = "1") 
staph_cs$ENT <- fct_recode(staph_cs$ENT, "No" = "0", "Yes" = "1") 
staph_cs$kidney <- fct_recode(staph_cs$kidney, "No" = "0", "Yes" = "1") 
staph_cs$SEX <- fct_recode(staph_cs$SEX, "Male" = "1", "Female" = "2") 
staph_cs$mrsafinal <- fct_recode(staph_cs$mrsafinal, "MSSA" = "0", "MRSA" = "1") 
staph_cs$INVASIVE <- fct_recode(staph_cs$INVASIVE, "No" = "0", "Yes" = "1") 
staph_cs$SMOKER <- fct_recode(staph_cs$SMOKER, "No" = "0", "Yes" = "1") 
staph_cs$DIABETES <- fct_recode(staph_cs$DIABETES, "No" = "0", "Yes" = "1") 
staph_cs$heart <- fct_recode(staph_cs$heart, "No" = "0", "Yes" = "1") 
staph_cs$WOUND <- fct_recode(staph_cs$WOUND, "No" = "0", "Yes" = "1") 

# Remove missing obs from variables of interest
staph_css <- staph_cs %>%
  drop_na(hosp, co) 

# Set 1
# apply exclusion criteria hosp_onset==0, CACASE==0
hop <- staph_css %>%
  filter(hosp_onset==0 & co=="Healthcare-associated") 

# Set 2
com <- staph_css %>%
  filter(hosp_onset==0 & co=="Community-onset")

# apply weights
staph_des <- svydesign(ids=~1, weights = ~WEIGHT, data=staph_css)
hop_des <- svydesign(ids=~1, weights = ~WEIGHT, data = hop)
com_des <- svydesign(ids=~1, weights = ~WEIGHT, data = com)


```



# Univariate analysis, unweighted EDA
```{r}
# Categorical variables, freq/proportions


# primary outcome
prop.table(table(com$hosp))
prop.table(table(hop$hosp))

# primary exposures
prop.table(table(hop$mrsafinal)) # antibiotic resistant
prop.table(table(com$mrsafinal))

prop.table(table(hop$BSI)) # BSI infection
prop.table(table(com$BSI))

prop.table(table(hop$SSI)) # SSI infection
prop.table(table(com$SSI))

prop.table(table(hop$SST)) # SST infection
prop.table(table(com$SST))

prop.table(table(hop$ENT)) # ENT infection
prop.table(table(com$ENT))

prop.table(table(hop$REP)) # REP infection
prop.table(table(com$REP))

prop.table(table(hop$BJI)) # BJI infection
prop.table(table(com$BJI))

prop.table(table(hop$kidney)) # kidney disease or dialysis
prop.table(table(com$kidney))

prop.table(table(hop$DIABETES)) # diabetes
prop.table(table(com$DIABETES))

prop.table(table(hop$OBESITY)) # obesity
prop.table(table(com$OBESITY))

prop.table(table(hop$SATX)) # treatment
prop.table(table(com$SATX))

summary(hop$newage) # age
summary(com$newage)
hist(hop$newage)
hist(com$newage)

# not significant 
prop.table(table(hop$SEX)) # sex 
prop.table(table(com$SEX))

chisq.test(table(com$SEX, com$hosp)) 
chisq.test(table(hop$SEX, hop$hosp))


# Chi-square test association, significant covariates
# categorical variables, continuous variables 

wilcox.test(hop$newage ~ hop$hosp) # age
wilcox.test(com$newage ~ com$hosp)

chisq.test(table(com$mrsafinal, com$hosp)) # mrsa
chisq.test(table(hop$mrsafinal, hop$hosp))

chisq.test(table(com$kidney, com$hosp)) # kidney or dialysis
fisher.test(table(hop$kidney, hop$hosp))

chisq.test(table(com$BSI, com$hosp)) #BSI
chisq.test(table(hop$BSI, hop$hosp))

chisq.test(table(com$SST, com$hosp)) #SST
chisq.test(table(hop$SST, hop$hosp))

chisq.test(table(com$SSI, com$hosp)) #SSI
chisq.test(table(hop$SSI, hop$hosp))

fisher.test(table(com$REP, com$hosp)) #REP
chisq.test(table(hop$REP, hop$hosp))

chisq.test(table(com$ENT, com$hosp)) #ENT
chisq.test(table(hop$ENT, hop$hosp))

chisq.test(table(com$OBESITY, com$hosp)) #OBESITY
chisq.test(table(hop$OBESITY, hop$hosp))

chisq.test(table(com$SMOKER, com$hosp)) #SMOKER
chisq.test(table(hop$SMOKER, hop$hosp))

chisq.test(table(com$DIABETES, com$hosp)) # diabetes
chisq.test(table(hop$DIABETES, hop$hosp))

chisq.test(table(com$SATX, com$hosp)) # treatment
chisq.test(table(hop$SATX, hop$hosp))


# Correlated covariates
chisq.test(table( hop$INVASIVE, hop$mrsafinal))
chisq.test(table( com$INVASIVE, com$mrsafinal))

fisher.test(table(com$DIABETES, com$kidney))
fisher.test(table(hop$DIABETES, hop$kidney))

chisq.test(table(com$OBESITY, com$DIABETES))
chisq.test(table(hop$OBESITY, hop$DIABETES))

boxplot(com$newage ~ com$DIABETES)
boxplot(hop$newage ~ hop$DIABETES)


# Not related, but possible interaction

chisq.test(table(com$SMOKER, com$OBESITY))
chisq.test(table(hop$SMOKER, hop$OBESITY))

chisq.test(table(com$SMOKER, com$DIABETES))
chisq.test(table(hop$SMOKER, hop$DIABETES))

boxplot(com$newage ~ com$SMOKER)
boxplot(hop$newage ~ hop$SMOKER)

boxplot(com$newage ~ com$kidney)
boxplot(hop$newage ~ hop$kidney)

boxplot(com$newage ~ com$OBESITY)
boxplot(hop$newage ~ hop$OBESITY)

boxplot(com$newage ~ com$mrsafinal)
boxplot(hop$newage ~ hop$mrsafinal)

boxplot(com$newage ~ com$INVASIVE)
boxplot(hop$newage ~ hop$INVASIVE)

boxplot(com$newage ~ com$SATX)
boxplot(hop$newage ~ hop$SATX)

```


# Descriptive statistics table
Univariate analysis, weighted EDA
```{r}

library(gtsummary)

table1 <- staph_des %>%
  tbl_svysummary(
    by = co,
    type = all_categorical() ~ "categorical",
    include = c(hosp, newage, SEX, mrsafinal, kidney, DIABETES, SMOKER, BSI, WOUND),
    statistic = list(all_continuous() ~ "{median} ({sd})",     all_categorical() ~ "{n}     ({p})"),
    digits = list (newage ~ c(0,1),
                   all_categorical() ~ c (0,1)),
    label = list(hosp ~ "Hospitalization", newage ~ "Age (years)",
                 SEX ~ "Sex", mrsafinal ~ "Strain", kidney ~ "Kidney Dialysis", DIABETES ~ "Diabetes", BSI ~ "Bloodstream Infection", SMOKER~"Current Smoker", WOUND ~ "Wound Present")) %>%
  add_p(test = c(newage) ~ "svy.wilcox.test") %>%
    add_overall() %>%
modify_header(
    label = " ") %>%
  modify_spanning_header(all_stat_cols() ~ "Table 1. Weighted Descriptive Statistics by Infection") %>%
   remove_footnote_header(columns = p.value) 

table1

table11 <- staph_des %>%
  tbl_svysummary(
    by = hosp,
    type = all_categorical() ~ "categorical",
    include = c(co, newage, SEX, mrsafinal, SATX, kidney, DIABETES, SMOKER, BSI, ENT, resp, WOUND),
    statistic = list(all_continuous() ~ "{median} ({sd})",     all_categorical() ~ "{n}     ({p})"),
    digits = list (newage ~ c(0,1),
                   all_categorical() ~ c (0,1)),
    label = list(co ~ "Community-associated", newage ~ "Age (years)",
                 SEX ~ "Sex", mrsafinal ~ "Strain", SATX ~ "Antibiotic or drainage received", kidney ~ "Kidney disease and/or Dialysis", DIABETES ~ "Diabetes", BSI ~ "Bloodstream Infection", SMOKER~"Current Smoker", resp ~ "Respiratory disease", ENT ~ "Ear, Nose, Throat Infection", WOUND ~ "Wound Present")) %>%
  add_p(test = c(newage) ~ "svy.wilcox.test") %>%
    add_overall() %>%
modify_header(
    label = " ") %>%
  modify_spanning_header(all_stat_cols() ~ "Table 1. Weighted Descriptive Statistics: Stratified by Infection Type")

table11


table2 <- staph_des %>%
  tbl_svysummary(
    by = co,
    type = all_categorical() ~ "categorical",
    include = c(HOSPID),
    sort = all_categorical() ~ "frequency",
    statistic = list( all_categorical() ~ "{n}  ({p})"),
    digits = list (all_categorical() ~ c (0,1)), 
    label = list(HOSPID ~ "Clinical Site")) %>%
modify_header(label =" ") %>%
  modify_spanning_header(all_stat_cols() ~ "Table 2")


table2

```

# Numeric binary variables for modeling

```{r}

com$hosp <- if_else(com$hosp=="No", 0, 1)
hop$hosp <- if_else(hop$hosp=="No", 0, 1)

# apply weights
hop_des <- svydesign(ids=~1, weights = ~WEIGHT, data = hop)
com_des <- svydesign(ids=~1, weights = ~WEIGHT, data = com)

table(com$hosp)
table(hop$hosp)

class(com$hosp)
class(hop$hosp)
class(com$kidney)
table(com$hosp)
table(hop$hosp)

```


# Comm Logistic regression 
2 models for each hosp vs. comm infections, without accounting for cluster effect due to clinical site
```{r}


c <- subset(staph_des, co == "Community-onset infection")
h <- subset(staph_des, co == "Hospital-associated infection")



# logistic reg comm full model
lm_comm <-
  svyglm(
    formula = hosp ~ mrsafinal +BSI + DIABETES+kidney+ SMOKER + WOUND, design = com_des,
    family = quasibinomial)
summary(lm_comm)

# logistic reg comm, LRT test 
# wound is useful, kidney is not
lm_comm1 <-
  svyglm(
    formula = hosp ~ mrsafinal +BSI + DIABETES+ SMOKER + WOUND,
    design = com_des,
    family = quasibinomial)
summary(lm_comm1)

# kidney not useful LRT 
drop_in_dev <- anova(lm_comm, lm_comm1,
                     test="Chisq")
drop_in_dev


# Wald test / variable selection, kidney not useful
library(survey)
regTermTest(lm_comm, ~mrsafinal, method = "Wald")
regTermTest(lm_comm, ~BSI)
regTermTest(lm_comm, ~SMOKER)
regTermTest(lm_comm, ~DIABETES)
regTermTest(lm_comm, ~kidney, method = "Wald")
regTermTest(lm_comm, ~WOUND, method = "Wald")



# survey-weight adjusted VIF
library(svydiags)
des_x <- model.matrix(~  mrsafinal +BSI + DIABETES+ kidney + SMOKER + WOUND ,data=data.frame(com))
svyvif(mobj=lm_comm, X= des_x, w=com$WEIGHT)


# predicted probabilities plots
library(sjPlot)
library(ggeffects)
ggpredict(lm_comm1, ci_level=0.95, terms = c("WOUND"))
ggpredict(lm_comm1, ci_level=0.95, terms = c("SMOKER"))
ggpredict(lm_comm1, ci_level=0.95, terms = c("DIABETES"))
ggpredict(lm_comm1, ci_level=0.95, terms = c("mrsafinal"))
ggpredict(lm_comm1, ci_level=0.95, terms = c("BSI"))
ggpredict(lm_comm1, ci_level=0.95, terms = c("mrsafinal", "WOUND"))
ggpredict(lm_comm1, ci_level=0.95, terms = c("mrsafinal", "BSI"))

# mrsafinal:BSI, not sig
ggeffect(lm_comm1, terms = c( "mrsafinal", "BSI"))  %>%
  plot( show_ci = TRUE, connect_lines=TRUE, colors = "bw", line_size = 0.1, dot_size = 3) +
  ylim(0,1) + 
  scale_shape_manual(values = c(18, 5)) + 
   theme(legend.position = "bottom") +
  labs(
    title = "Community-onset Infections", 
    y = "Probability of Hospitalization", x= "Strain",
    color = "BSI")

# mrsafinal:wound, not sig
ggeffect(lm_comm1, terms = c("mrsafinal", "WOUND"))  %>%
  plot( show_ci = TRUE, connect_lines=TRUE, colors = "bw") + 
  ylim(0,1) + 
  scale_shape_manual(values = c(17, 5)) +
  labs(
    title = "Community-onset Infections: Estimated Probability of Hospitalization", 
    y = "Probability of Hospitalization", x= "Strain",
    color = "WOUND")


library(svyROC)
set.seed(1)
cor <- corrected.wauc(data = com,
                     formula = hosp ~ mrsafinal +BSI + DIABETES + SMOKER + WOUND, tag.event = 1, tag.nonevent = 0, weights.var = "WEIGHT", strata.var = "INVASIVE", method = "RB", RB.method = "bootstrap")
print(cor)

# predicted values
com$phat3 <- predict(lm_comm1, newdata = com, type = "response")
summary(com$phat3)
class(com$phat3)

# spec
sp.obj <- wsp(response.var = "hosp",
              phat.var = "phat3",
              weights.var = "WEIGHT",
              tag.nonevent = 0,
              cutoff.value = 0.5,
              data = com )
print(sp.obj)

# sens
se.obj <-wse(response.var = "hosp",
              phat.var = "phat3",
              weights.var = "WEIGHT",
              tag.event = 1,
              cutoff.value = 0.5,
              data = com )
print(se.obj)

# plot AUCw
mycurve <- wroc(response.var = "hosp",
                phat.var = "phat3",
                weights.var = "WEIGHT",
                data =com,
                tag.event = 1,
                tag.nonevent = 0)

wroc.plot(x = mycurve,
          print.auc = TRUE,
          print.cutoff = TRUE)

# predicted probabilities plots
library(sjPlot)


# Generate predictions with confidence intervals
pred <- ggpredict(lm_comm, terms = c("BSI", "mrsafinal"))


# mrsafinal:BSI,, not sig
library(ggeffects)
ggeffect(lm_comm, terms = c("BSI", "mrsafinal"))  %>%
  plot( show_ci = TRUE, connect_lines=TRUE) +
  ylim(0,1) + 
  labs(
    title = "Community-onset Infections: Estimated Probability of Hospitalization", 
    y = "Probability of Hospitalization",
    color = "Strain")



# plot model diagnostics

plot_model(lm_comm, type ="res")

# calibration plot

com$predicted <- predict(lm_comm1, com, type = "response")

# blue = calibration curve, 
# red = perfect calibration
ggplot(com, aes(x = predicted, y = hosp)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess", color = "blue") +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  labs(
    title = "Calibration Plot without Binning",
    x = "Predicted Probability",
    y = "Observed Outcome", 
)

# not useful for survey-weight logistic
plot(residuals(lm_comm, type = "deviance"))

# residual analysis
residuals <- residuals(lm_comm, type = "pearson")
plot(fitted(lm_comm), residuals, main = "Residuals vs. Fitted Values")
abline(h = 0, lty = 2, col = "red")  # Reference line
```


# Hop logistic regression
```{r}


##############################################################################
# logistic reg hosp

lm_hop <-
  svyglm(
    formula = hosp ~ mrsafinal +BSI + DIABETES+ +kidney+ SMOKER + WOUND,
    design = hop_des,
    family = quasibinomial)
summary(lm_hop)

# logistic reg comm, LRT test 
# kidney is useful, wound is not
lm_hop1 <-
  svyglm(
    formula = hosp ~ mrsafinal +BSI + DIABETES+ kidney+ SMOKER ,
    design = hop_des,
    family = quasibinomial)
summary(lm_hop1)

# wound not useful LRT 
drop_in_dev <- anova(lm_hop, lm_hop1,
                     test="Chisq")
drop_in_dev

# Wald test, wound not useful
regTermTest(lm_hop, ~mrsafinal, method = "Wald")
regTermTest(lm_hop, ~BSI)
regTermTest(lm_hop, ~SMOKER)
regTermTest(lm_hop, ~DIABETES)
regTermTest(lm_hop, ~kidney)
regTermTest(lm_hop, ~WOUND, method = "Wald")


# survey-weight adjusted VIF
library(svydiags)
des_x <- model.matrix(~  mrsafinal +BSI + DIABETES+ kidney+ SMOKER + WOUND,data=data.frame(hop))

svyvif(mobj=lm_hop, X= des_x, w=hop$WEIGHT)



# Estimated probabilities 
ggpredict(lm_hop1, ci_level=0.95, terms = c("mrsafinal", "BSI"))

# mrsafinal:wound, not sig
library(ggeffects)
ggeffect(lm_hop1, terms = c( "mrsafinal", "BSI"))  %>%
  plot( show_ci = TRUE, connect_lines=TRUE, colors = "bw", line_size = 0.1, dot_size = 3 ) +
  ylim(0,1) + 
  scale_shape_manual(values = c(18, 5)) + 
   theme(legend.position = "bottom") +
  labs(
    title = "Healthcare-associated Infections", 
    y = "Probability of Hospitalization", x= "Strain",
    color = "BSI")

# mrsafinal:wound, not sig
library(ggeffects)
ggeffect(lm_hop1, terms = c("mrsafinal", "kidney"))  %>%
  plot( show_ci = TRUE, connect_lines=TRUE, colors = "bw") + 
  ylim(0,1) + 
  scale_shape_manual(values = c(17, 5)) +
  labs(
    title = "Community-onset Infections: Estimated Probability of Hospitalization", 
    y = "Probability of Hospitalization", x= "Strain",
    color = "kidney")




# deviance residuals

# not useful for survey-weight logistic
plot(residuals(lm_hop, type = "deviance"))

# residual analysis
residuals <- residuals(lm_hop, type = "pearson")
plot(fitted(lm_hop), residuals, main = "Residuals vs. Fitted Values")
abline(h = 0, lty = 2, col = "red")  # Reference line


# corrected AUC, sens, spec
library(svyROC)
set.seed(1)
cor2 <- corrected.wauc(data = hop,
                     formula = hosp ~ mrsafinal +BSI + DIABETES+kidney + SMOKER, tag.event = 1, tag.nonevent = 0, weights.var = "WEIGHT", strata.var = "INVASIVE", method = "RB", RB.method = "bootstrap", B=500)
print(cor2)

# predicted values
hop$phat3 <- predict(lm_hop1, newdata = hop, type = "response")

# spec
sp.obj <- wsp(response.var = "hosp",
              phat.var = "phat3",
              weights.var = "WEIGHT",
              tag.nonevent = 0,
              cutoff.value = 0.5,
              data = hop )
print(sp.obj)

# sens
se.obj <-wse(response.var = "hosp",
              phat.var = "phat3",
              weights.var = "WEIGHT",
              tag.event = 1,
              cutoff.value = 0.5,
              data = hop )
print(se.obj)

# plot AUCw
mycurve2 <- wroc(response.var = "hosp",
                phat.var = "phat3",
                weights.var = "WEIGHT",
                data =hop,
                tag.event = 1,
                tag.nonevent = 0)

wroc.plot(x = mycurve2,
          print.auc = TRUE,
          print.cutoff = TRUE)

# calibration plot

hop$predicted <- predict(lm_hop1, hop, type = "response")

# blue = calibration curve, 
# red = perfect calibration
ggplot(hop, aes(x = predicted, y = hosp)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess", color = "blue") +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  labs(
    title = "Calibration Plot without Binning",
    x = "Predicted Probability",
    y = "Observed Outcome", 
)

```



# Forest plot for standard logistic regression

```{r}

library(sjPlot)
plot_model(lm_comm, show.values = TRUE, value.offset = .3, vline.color = "red")
plot_model(lm_hop, show.values = TRUE, value.offset = .3, vline.color = "red")

# forest plot with multiple models 
# OR with 95% CI
plot_models(lm_comm, lm_hop, grid=TRUE, m.labels = c("Community-onset infection", "Hospital-associated infection"), show.values = TRUE, show.p = TRUE, colors="bw")

# overlappping forest plot
plot_models(lm_comm, lm_hop, m.labels = c("Community-onset infection", "Hospital-associated infection"), show.values = TRUE, show.p = TRUE, colors="gs", dot.size=2, ci.lvl =0.95, vline.color="red", axis.labels = c( "Wound", "Current Smoker", "Dialysis", "Diabetes", "BSI", "MSSA"))

# side by side table
tab_model(lm_comm, lm_hop,
          pred.labels = c("Intercept", "MSSA", "BSI", "Diabetes", "Dialysis", "Current Smoker", "Wound"),
  dv.labels = c("Community-Onset", "Healthcare-Associated"),
  string.pred = "Variables",
  string.ci = "95% CI",
  string.p = "p-value", 
  string.est = "Adjusted OR estimates",
  show.ngroups = FALSE)

library(gtsummary)
tbl_regression(lm_comm1, exponentiate = TRUE)


install.packages("modelsummary")
library(modelsummary)
mod_logit <- list(lm_comm1, lm_hop1)
modelsummary(mod_logit, exponentiate = c(TRUE, TRUE))

```


# Manual forest plot 

```{r}


# Extract odds ratios and confidence intervals
odds_ratios <- exp(coef(lm_comm))
conf_int <- exp(confint(lm_comm))

# Create a table of results
results <- data.frame(
    Variable = names(odds_ratios),
    OR = round(odds_ratios, 2),
    LowerCI = format(round(conf_int[, 1], 2), nsmall=2),
    UpperCI = format(round(conf_int[, 2], 2), nsmall=2), 
    p_values = round(summary(lm_comm)$coefficients[, 4], 2),
    label = c("blank", "MRSA", "BSI", "Diabetes", "Kidney dialysis", "Current Smoker", "Wound"),
    Index = c(0,1,2,3,4,5,6),
    Model = "lm_comm"
)

results

results$p_values <-as.character(results$p_values)
  
results$p_values <- if_else(results$p_values==0.0000, "<0.0001", results$p_values)

results


# Convert Variable to factor/sort for ordering
results$Variable <- factor(results$Variable, levels = rev(results$Variable))
results$label <- factor(results$label, levels = rev(results$label))

# Create 95% CI
results$CI = paste("(", results$LowerCI, ", " , results$UpperCI, ")", sep="")


# remove intercept
results <- filter(results, Variable != "(Intercept)")


print(results)  # Display odds ratios and confidence intervals

# subset view
view = subset(results, select = c(label, OR, CI, p_values, Index))

# Display odds ratios and confidence intervals
print(view)

```

### repeat for model 2, then bind
```{r}


# Extract odds ratios and confidence intervals
odds_ratios <- exp(coef(lm_hop))
conf_int <- exp(confint(lm_hop))

# Create a table of results
results2 <- data.frame(
    Variable = names(odds_ratios),
    OR = round(odds_ratios, 2),
    LowerCI = format(round(conf_int[, 1], 2), nsmall=2),
    UpperCI = format(round(conf_int[, 2], 2), nsmall=2), 
    p_values = round(summary(lm_hop)$coefficients[, 4], 2),
    label = c("blank", "MRSA", "BSI", "Diabetes", "Kidney dialysis", "Current Smoker", "Wound"),
    Index = c(0,1,2,3,4,5,6),
    Model = "lm_hop"
)

results2

results2$p_values <-as.character(results2$p_values)
  
results2$p_values <- if_else(results2$p_values==0.0000, "<0.0001", results2$p_values)

results2


# Convert Variable to factor/sort for ordering
results2$Variable <- factor(results2$Variable, levels = rev(results2$Variable))
results2$label <- factor(results2$label, levels = rev(results2$label))

# Create 95% CI
results2$CI = paste("(", results2$LowerCI, ", " , results2$UpperCI, ")", sep="")


# remove intercept
results2 <- filter(results2, Variable != "(Intercept)")


print(results2)  # Display odds ratios and confidence intervals

# subset view
view2 = subset(results2, select = c(label, OR, CI, p_values, Index))

# Display odds ratios and confidence intervals
print(view2)


# Combine the two dataframes
bind <- bind_rows(results, results2)

# View the combined dataframe
print(bind)



```





# Manual forest plot pt. 2
```{r}

## Create the table-base pallete
table_base1 <- ggplot(results, aes(y=label)) +
  ylab(NULL) + xlab("  ") + 
  theme(plot.title = element_text(hjust = 0.5, size=5), 
        axis.text.x = element_text(color="white", hjust = -3, size = 5), ## This is used to help with alignment
        axis.line = element_blank(),
        axis.text.y = element_blank(), 
        axis.ticks = element_blank(),
        axis.title.y = element_blank(), 
        legend.position = "none",
        panel.background = element_blank(), 
        panel.border = element_blank(), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        plot.background = element_blank())

## OR point estimate table
tab1 <- table_base1 + 
  labs(title = "space") +
  geom_text(aes(y = rev(Index), x = 1, label = OR), size = 3) + ## decimal places
  ggtitle("Adj. OR") + 
  theme(plot.title = element_text(size = 10))

## 95% CI table
tab2 <- table_base1 +
  geom_text(aes(y = rev(Index), x = 1, label = CI), size = 3) + 
  ggtitle("95% CI") +   theme(plot.title = element_text(size = 10))
tab1

########################################################

## Create the table-base pallete
table_base2 <- ggplot(results2, aes(y=label)) +
  ylab(NULL) + xlab("  ") + 
  theme(plot.title = element_text(hjust = 0.5, size=5), 
        axis.text.x = element_text(color="white", hjust = -3, size = 5), ## This is used to help with alignment
        axis.line = element_blank(),
        axis.text.y = element_blank(), 
        axis.ticks = element_blank(),
        axis.title.y = element_blank(), 
        legend.position = "none",
        panel.background = element_blank(), 
        panel.border = element_blank(), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        plot.background = element_blank())

## OR point estimate table
tab3 <- table_base2 + 
  labs(title = "space") +
  geom_text(aes(y = rev(Index), x = 1, label = OR), size = 3) + ## decimal places
  ggtitle("Adj. OR") + 
  theme(plot.title = element_text(size = 10))

## 95% CI table
tab4 <- table_base2 +
  geom_text(aes(y = rev(Index), x = 1, label = CI), size = 3) + 
  ggtitle("95% CI") +   theme(plot.title = element_text(size = 10))
tab3

# Create forest plot
forest_plot <- ggplot(bind, aes(x = label, y = OR, shape = Model, ymin = as.numeric(LowerCI), ymax = as.numeric(UpperCI))) +
  geom_point(position = position_dodge(width = 0.5), size = 2) + # Apply position_dodge
  geom_errorbar(aes(ymin = as.numeric(LowerCI), ymax = as.numeric(UpperCI)), 
                position = position_dodge(width = 0.5), width = 0.2) + # Apply position_dodge+
    geom_hline(yintercept = 1, linetype = "dashed", color = "grey", size = 1) +
    labs(title = "", y = "", x="") +
    theme_minimal() +
    coord_flip() + 
  scale_shape_manual(values = c(5, 16), labels = c("Community-onset Infections", "Healthcare-associated Infections")) +
  theme(legend.title = element_blank(), legend.position = "bottom") + 
 scale_y_log10(
    breaks = c(1, 5, 10, 100)) 
forest_plot

# Combine table and forest plot
library(gridExtra)
lay <-  matrix(c(1,1,1,1,1,1,1,1,1,1,2,3,3), nrow = 1)
grid.arrange(forest_plot, tab3, tab4, layout_matrix = lay)

lay <-  matrix(c(1,1,1,1,1,1,1,1,1,1,2,3,3), nrow = 1)
grid.arrange(forest_plot, tab1, tab2, layout_matrix = lay)



```


# glmm


```{r}


library(lme4)
# weighted ICC for comm=1
rm_comm <- glmer(hosp  ~ (1|HOSPID), data=com, weights=WEIGHT, family="binomial")
summary(rm_comm)
icc <- rm_comm@theta[1]^2 / (rm_comm@theta[1]^2 + (3.14159^2/3))
icc

# plot random effects
random_effects <- ranef(rm_comm)$HOSPID
print(random_effects)  # Displays the random intercepts

random_effects_df <- as.data.frame(random_effects)
colnames(random_effects_df) <- "Intercept"
random_effects_df$HOSPID <- rownames(random_effects_df)

# Plot random effects (intercept) by hospid
ggplot(random_effects_df, aes(x = HOSPID, y = Intercept)) +
  geom_point(color = "blue", size = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title = "Random Effects Intercepts (Community-onset)",
    x = "Clinic ID",
    y = "Intercept Value"
  ) +
  theme_minimal()


# plot qq random effects 
library(sjPlot)
sjp.lmer(rm_comm)



# weighted ICC for hop=1
rm_hop <- glmer(hosp  ~ (1|HOSPID), data=hop, weights=WEIGHT, family="binomial")
summary(rm_hop)
icc <- rm_hop@theta[1]^2 / (rm_hop@theta[1]^2 + (3.14159^2/3))
icc

tab_model(rm_comm, rm_hop)

# plot random effects
random_effects <- ranef(rm_hop)$HOSPID
print(random_effects)  # Displays the random intercepts

random_effects_df <- as.data.frame(random_effects)
colnames(random_effects_df) <- "Intercept"
random_effects_df$HOSPID <- rownames(random_effects_df)



# Plot
ggplot(random_effects_df, aes(x = HOSPID, y = Intercept)) +
  geom_point(color = "blue", size = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(
    title = "Random Effects Intercepts (Hosp-associated)",
    x = "Clinic ID",
    y = "Intercept Value"
  ) +
  theme_minimal()


```


# random effects + slope with respect to age
```{r}

# comm-associated
model11 <- glmer(hosp  ~ newage + (newage|HOSPID), data=com, weights=WEIGHT, family="binomial")
summary(model11)
icc <- model11@theta[1]^2 / (model11@theta[1]^2 + (3.14159^2/3))
icc

# plot 

random_effects <- ranef(model11)$HOSPID
print(random_effects)  # Displays random intercepts and slopes

random_effects_df <- as.data.frame(random_effects)
colnames(random_effects_df) <- c("Intercept", "Slope")
random_effects_df$HOSPID <- rownames(random_effects_df)

# plot 
library(ggplot2)

ggplot(random_effects_df, aes(x = Intercept, y = Slope)) +
  geom_point(size = 3, color = "blue") +
  labs(
    title = "Random Effects: Intercepts and Slopes",
    x = "Random Intercept",
    y = "Random Slope"
  ) +
  theme_minimal()

# center predicted y 
com <- com %>%
  group_by(HOSPID) %>%
  mutate(age_centered = newage - mean(newage))

# Add group-specific fitted lines

com$group_fit <- predict(model11, re.form = ~ (newage | HOSPID))

ggplot(com, aes(x = age_centered, y = hosp, group = HOSPID)) +
  geom_point(alpha = 0.5) +
  geom_line(aes(y = group_fit, color = HOSPID)) +
  labs(
    title = "Group-Specific Trajectories",
    x = "Age (years)",
    y = "Hospitalization"
  ) +
  theme_minimal() +  ylim(-10, 1) 

summary(com$hosp)

```






# original forest plot
```{r}
# forest plot

# Extract odds ratios and confidence intervals
odds_ratios <- exp(coef(model))
conf_int <- exp(confint(model))

# Create a table of results
results <- data.frame(
  Variable = names(odds_ratios),
  OR = round(odds_ratios, 2),
  LowerCI = round(conf_int[, 1], 2),
  UpperCI = round(conf_int[, 2], 2), 
  p_values = round(summary(model)$coefficients[, 4], 4), 
  label = c("blank", "Bloodstream infection", "CNS infection", "Undetermined infection", "Surgical infection", "Skin & Soft Tissue infection", "Respiratory infection", "ENT infection", "MRSA species", "CVD", "Cancer", "Skin disorder", "Diabetes", "Kidney dysfunction", "Age", "Smoker", "Obesity status", "Surgery in prior 12 months", "Any drug use" )
)

# remove intercept
results <- filter(results, Variable != "(Intercept)")


# Convert Variable to factor/sort for ordering
results$Variable <- factor(results$Variable, levels = rev(results$Variable))
results$label <- factor(results$label, levels = rev(results$label))

# Create CI
results$CI = paste("(", results$LowerCI, ", " , results$UpperCI, ")", sep="")



view = subset(results, select = c(label, OR, CI, p_values))

print(results)  # Display odds ratios and confidence intervals
options(max.print=1000)
print(view)
# Odds ratio plot 
library(ggplot2)
library(gridExtra)

p<-tableGrob(results)
grid.arrange(p)



# Create forest plot
forest_plot <- ggplot(results, aes(x = label, y = OR)) +
  geom_point(size = 2) +
  geom_errorbar(aes(ymin = LowerCI, ymax = UpperCI), width = 0.2) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "red", size = 1) +
  scale_y_log10() +
  labs(title = "", y = "Adjusted Odds Ratio", x="") +
  theme_minimal() +
  coord_flip() 
forest_plot




```


